{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\akeer\\\\Downloads\\\\streamlit\\\\frontend\\\\irrigation_monitoring\\\\src\\\\components\\\\GroundwaterDashboard.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer, PieChart, Pie, Cell, Legend } from \"recharts\";\nimport \"../styles/Dashboard.css\";\nimport irrigationBg from \"../assets/irrigation-bg.jpg\";\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst COLORS = [\"#0088FE\", \"#00C49F\", \"#FF8042\"];\nconst GroundwaterDashboard = () => {\n  _s();\n  const [latitude, setLatitude] = useState(\"\");\n  const [longitude, setLongitude] = useState(\"\");\n  const [error, setError] = useState(\"\");\n  const [data, setData] = useState([]);\n  const [currentMonthData, setCurrentMonthData] = useState(null);\n  const [selectedMonth, setSelectedMonth] = useState(null);\n  const [showDashboard, setShowDashboard] = useState(false);\n\n  // For filtering by location (you can expand this with your real locations)\n  const sampleLocations = [{\n    name: \"Village A\",\n    lat: 12.9716,\n    lon: 77.5946\n  }, {\n    name: \"Village B\",\n    lat: 28.7041,\n    lon: 77.1025\n  }, {\n    name: \"Village C\",\n    lat: 19.0760,\n    lon: 72.8777\n  }];\n  const [selectedLocation, setSelectedLocation] = useState(\"\");\n  const monthNames = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"];\n  const getLevelClass = level => {\n    const l = level.toLowerCase();\n    if (l === \"low\") return \"level- low\";\n    if (l === \"moderate\") return \"level-moderate\";\n    if (l === \"high\") return \"level-high\";\n    return \"\";\n  };\n\n  // Helper to count how many months are Low/Moderate/High\n  const waterLevelCounts = () => {\n    const counts = {\n      Low: 0,\n      Moderate: 0,\n      High: 0\n    };\n    data.forEach(d => {\n      const lvl = d.level;\n      if (counts[lvl] !== undefined) counts[lvl]++;\n    });\n    return counts;\n  };\n  const pieData = () => {\n    const counts = waterLevelCounts();\n    return [{\n      name: \"Low\",\n      value: counts.Low\n    }, {\n      name: \"Moderate\",\n      value: counts.Moderate\n    }, {\n      name: \"High\",\n      value: counts.High\n    }];\n  };\n  const handlePredict = async () => {\n    let lat, lon;\n    setError(\"\");\n    setShowDashboard(false);\n    setCurrentMonthData(null);\n    setSelectedMonth(null);\n    setData([]);\n\n    // If location selected from dropdown, use that\n    if (selectedLocation) {\n      const loc = sampleLocations.find(loc => loc.name === selectedLocation);\n      lat = loc.lat;\n      lon = loc.lon;\n      setLatitude(lat);\n      setLongitude(lon);\n    } else {\n      lat = parseFloat(latitude);\n      lon = parseFloat(longitude);\n    }\n    if (isNaN(lat) || lat < -90 || lat > 90) {\n      setError(\"Enter a valid latitude (-90 to 90)\");\n      return;\n    }\n    if (isNaN(lon) || lon < -180 || lon > 180) {\n      setError(\"Enter a valid longitude (-180 to 180)\");\n      return;\n    }\n    try {\n      const res = await fetch(\"http://localhost:5000/predict\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          latitude: lat,\n          longitude: lon\n        })\n      });\n      if (!res.ok) {\n        const err = await res.json();\n        setError(err.error || \"Something went wrong.\");\n        return;\n      }\n      const result = await res.json();\n      setData(result);\n      const currentMonth = new Date().getMonth() + 1;\n      const current = result.find(d => d.month === currentMonth);\n      setCurrentMonthData(current);\n      setSelectedMonth(currentMonth);\n      setShowDashboard(true);\n    } catch (err) {\n      setError(\"Error connecting to the backend.\");\n    }\n  };\n  const chartData = data.map(item => ({\n    month: monthNames[item.month - 1],\n    level: item.level === \"Low\" ? 1 : item.level === \"Moderate\" ? 2 : 3\n  }));\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    style: {\n      backgroundImage: `url(${irrigationBg})`,\n      backgroundSize: \"cover\",\n      minHeight: \"100vh\",\n      padding: \"20px\",\n      color: \"#fff\",\n      textShadow: \"0 0 5px #000\"\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Groundwater Level Forecast\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"header-with-gif\",\n      children: /*#__PURE__*/_jsxDEV(\"img\", {\n        src: \"https://c.tenor.com/sr8g_XsZYDEAAAAC/raining-sparkle.gif\",\n        alt: \"Water drop animation\",\n        className: \"water-drop-gif\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 133,\n        columnNumber: 3\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"form-group\",\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        children: \"Select Location:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 143,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n        value: selectedLocation,\n        onChange: e => setSelectedLocation(e.target.value),\n        children: [/*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"\",\n          children: \"-- Or enter manually --\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 148,\n          columnNumber: 11\n        }, this), sampleLocations.map(loc => /*#__PURE__*/_jsxDEV(\"option\", {\n          value: loc.name,\n          children: loc.name\n        }, loc.name, false, {\n          fileName: _jsxFileName,\n          lineNumber: 150,\n          columnNumber: 13\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 144,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 142,\n      columnNumber: 7\n    }, this), !selectedLocation && /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"form-group\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Latitude (-90 to 90):\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 160,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"number\",\n          value: latitude,\n          onChange: e => setLatitude(e.target.value),\n          placeholder: \"Enter latitude\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 161,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 159,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"form-group\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Longitude (-180 to 180):\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 170,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"number\",\n          value: longitude,\n          onChange: e => setLongitude(e.target.value),\n          placeholder: \"Enter longitude\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 171,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 169,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handlePredict,\n      children: \"Get Forecast\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 181,\n      columnNumber: 7\n    }, this), error && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"error\",\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 183,\n      columnNumber: 17\n    }, this), showDashboard && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"dashboard\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"pie-section\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"Water Level Distribution\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 189,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(ResponsiveContainer, {\n          width: \"100%\",\n          height: 250,\n          children: /*#__PURE__*/_jsxDEV(PieChart, {\n            children: [/*#__PURE__*/_jsxDEV(Pie, {\n              data: pieData(),\n              dataKey: \"value\",\n              nameKey: \"name\",\n              cx: \"50%\",\n              cy: \"50%\",\n              outerRadius: 80,\n              label: true,\n              children: pieData().map((entry, index) => /*#__PURE__*/_jsxDEV(Cell, {\n                fill: COLORS[index % COLORS.length]\n              }, `cell-${index}`, false, {\n                fileName: _jsxFileName,\n                lineNumber: 202,\n                columnNumber: 21\n              }, this))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 192,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(Tooltip, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 205,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(Legend, {\n              verticalAlign: \"bottom\",\n              height: 36\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 206,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 191,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 190,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"level-numbers\",\n          children: Object.entries(waterLevelCounts()).map(([level, count]) => /*#__PURE__*/_jsxDEV(\"div\", {\n            className: `level-count ${getLevelClass(level)}`,\n            children: [level, \": \", count]\n          }, level, true, {\n            fileName: _jsxFileName,\n            lineNumber: 211,\n            columnNumber: 17\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 209,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 188,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"card\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: [monthNames[currentMonthData.month - 1], \" Forecast\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 220,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n            children: \"Groundwater Level:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 222,\n            columnNumber: 15\n          }, this), \" \", /*#__PURE__*/_jsxDEV(\"span\", {\n            className: getLevelClass(currentMonthData.level),\n            children: currentMonthData.level\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 223,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 221,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n            children: \"Temperature:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 228,\n            columnNumber: 15\n          }, this), \" \", (25 + Math.random() * 5).toFixed(1), \" \\xB0C\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 227,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n            children: \"Humidity:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 231,\n            columnNumber: 15\n          }, this), \" \", (50 + Math.random() * 20).toFixed(0), \" %\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 230,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 219,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"form-group\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Explore Another Month:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 237,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n          value: selectedMonth,\n          onChange: e => setSelectedMonth(parseInt(e.target.value)),\n          children: data.map(item => /*#__PURE__*/_jsxDEV(\"option\", {\n            value: item.month,\n            children: monthNames[item.month - 1]\n          }, item.month, false, {\n            fileName: _jsxFileName,\n            lineNumber: 243,\n            columnNumber: 17\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 238,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 236,\n        columnNumber: 11\n      }, this), selectedMonth && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"card\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: monthNames[selectedMonth - 1]\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 252,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n            children: \"Groundwater Level:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 254,\n            columnNumber: 17\n          }, this), \" \", /*#__PURE__*/_jsxDEV(\"span\", {\n            className: getLevelClass(data.find(d => d.month === selectedMonth).level),\n            children: data.find(d => d.month === selectedMonth).level\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 255,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 253,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 251,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n        style: {\n          marginTop: \"40px\"\n        },\n        children: \"Monthly Forecast Flow\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 265,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(ResponsiveContainer, {\n        width: \"100%\",\n        height: 300,\n        children: /*#__PURE__*/_jsxDEV(LineChart, {\n          data: chartData,\n          margin: {\n            top: 10,\n            right: 30,\n            left: 0,\n            bottom: 0\n          },\n          children: [/*#__PURE__*/_jsxDEV(CartesianGrid, {\n            strokeDasharray: \"3 3\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 271,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(XAxis, {\n            dataKey: \"month\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 272,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(YAxis, {\n            ticks: [1, 2, 3],\n            domain: [0, 4],\n            tickFormatter: val => [\"\", \"Low\", \"Moderate\", \"High\"][val]\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 273,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Tooltip, {\n            formatter: value => [\"Low\", \"Moderate\", \"High\"][value]\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 278,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Line, {\n            type: \"monotone\",\n            dataKey: \"level\",\n            stroke: \"#007bff\",\n            strokeWidth: 3\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 279,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 267,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 266,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 186,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 120,\n    columnNumber: 5\n  }, this);\n};\n_s(GroundwaterDashboard, \"s2cmWgFWKgMn1erhi3gDKL3FYX8=\");\n_c = GroundwaterDashboard;\nexport default GroundwaterDashboard;\nvar _c;\n$RefreshReg$(_c, \"GroundwaterDashboard\");","map":{"version":3,"names":["React","useState","useEffect","LineChart","Line","XAxis","YAxis","CartesianGrid","Tooltip","ResponsiveContainer","PieChart","Pie","Cell","Legend","irrigationBg","jsxDEV","_jsxDEV","Fragment","_Fragment","COLORS","GroundwaterDashboard","_s","latitude","setLatitude","longitude","setLongitude","error","setError","data","setData","currentMonthData","setCurrentMonthData","selectedMonth","setSelectedMonth","showDashboard","setShowDashboard","sampleLocations","name","lat","lon","selectedLocation","setSelectedLocation","monthNames","getLevelClass","level","l","toLowerCase","waterLevelCounts","counts","Low","Moderate","High","forEach","d","lvl","undefined","pieData","value","handlePredict","loc","find","parseFloat","isNaN","res","fetch","method","headers","body","JSON","stringify","ok","err","json","result","currentMonth","Date","getMonth","current","month","chartData","map","item","className","style","backgroundImage","backgroundSize","minHeight","padding","color","textShadow","children","fileName","_jsxFileName","lineNumber","columnNumber","src","alt","onChange","e","target","type","placeholder","onClick","width","height","dataKey","nameKey","cx","cy","outerRadius","label","entry","index","fill","length","verticalAlign","Object","entries","count","Math","random","toFixed","parseInt","marginTop","margin","top","right","left","bottom","strokeDasharray","ticks","domain","tickFormatter","val","formatter","stroke","strokeWidth","_c","$RefreshReg$"],"sources":["C:/Users/akeer/Downloads/streamlit/frontend/irrigation_monitoring/src/components/GroundwaterDashboard.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport {\r\n  LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer,\r\n  PieChart, Pie, Cell, Legend\r\n} from \"recharts\";\r\nimport \"../styles/Dashboard.css\";\r\nimport irrigationBg from \"../assets/irrigation-bg.jpg\";\r\n\r\nconst COLORS = [\"#0088FE\", \"#00C49F\", \"#FF8042\"];\r\n\r\nconst GroundwaterDashboard = () => {\r\n  const [latitude, setLatitude] = useState(\"\");\r\n  const [longitude, setLongitude] = useState(\"\");\r\n  const [error, setError] = useState(\"\");\r\n  const [data, setData] = useState([]);\r\n  const [currentMonthData, setCurrentMonthData] = useState(null);\r\n  const [selectedMonth, setSelectedMonth] = useState(null);\r\n  const [showDashboard, setShowDashboard] = useState(false);\r\n\r\n  // For filtering by location (you can expand this with your real locations)\r\n  const sampleLocations = [\r\n    { name: \"Village A\", lat: 12.9716, lon: 77.5946 },\r\n    { name: \"Village B\", lat: 28.7041, lon: 77.1025 },\r\n    { name: \"Village C\", lat: 19.0760, lon: 72.8777 },\r\n  ];\r\n  const [selectedLocation, setSelectedLocation] = useState(\"\");\r\n\r\n  const monthNames = [\r\n    \"January\", \"February\", \"March\", \"April\", \"May\", \"June\",\r\n    \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"\r\n  ];\r\n\r\n  const getLevelClass = (level) => {\r\n    const l = level.toLowerCase();\r\n    if (l === \"low\") return \"level- low\";\r\n    if (l === \"moderate\") return \"level-moderate\";\r\n    if (l === \"high\") return \"level-high\";\r\n    return \"\";\r\n  };\r\n\r\n  // Helper to count how many months are Low/Moderate/High\r\n  const waterLevelCounts = () => {\r\n    const counts = { Low: 0, Moderate: 0, High: 0 };\r\n    data.forEach((d) => {\r\n      const lvl = d.level;\r\n      if (counts[lvl] !== undefined) counts[lvl]++;\r\n    });\r\n    return counts;\r\n  };\r\n\r\n  const pieData = () => {\r\n    const counts = waterLevelCounts();\r\n    return [\r\n      { name: \"Low\", value: counts.Low },\r\n      { name: \"Moderate\", value: counts.Moderate },\r\n      { name: \"High\", value: counts.High },\r\n    ];\r\n  };\r\n\r\n  const handlePredict = async () => {\r\n    let lat, lon;\r\n\r\n    setError(\"\");\r\n    setShowDashboard(false);\r\n    setCurrentMonthData(null);\r\n    setSelectedMonth(null);\r\n    setData([]);\r\n\r\n    // If location selected from dropdown, use that\r\n    if (selectedLocation) {\r\n      const loc = sampleLocations.find(loc => loc.name === selectedLocation);\r\n      lat = loc.lat;\r\n      lon = loc.lon;\r\n      setLatitude(lat);\r\n      setLongitude(lon);\r\n    } else {\r\n      lat = parseFloat(latitude);\r\n      lon = parseFloat(longitude);\r\n    }\r\n\r\n    if (isNaN(lat) || lat < -90 || lat > 90) {\r\n      setError(\"Enter a valid latitude (-90 to 90)\");\r\n      return;\r\n    }\r\n    if (isNaN(lon) || lon < -180 || lon > 180) {\r\n      setError(\"Enter a valid longitude (-180 to 180)\");\r\n      return;\r\n    }\r\n\r\n    try {\r\n      const res = await fetch(\"http://localhost:5000/predict\", {\r\n        method: \"POST\",\r\n        headers: { \"Content-Type\": \"application/json\" },\r\n        body: JSON.stringify({ latitude: lat, longitude: lon })\r\n      });\r\n      if (!res.ok) {\r\n        const err = await res.json();\r\n        setError(err.error || \"Something went wrong.\");\r\n        return;\r\n      }\r\n      const result = await res.json();\r\n      setData(result);\r\n\r\n      const currentMonth = new Date().getMonth() + 1;\r\n      const current = result.find((d) => d.month === currentMonth);\r\n      setCurrentMonthData(current);\r\n      setSelectedMonth(currentMonth);\r\n      setShowDashboard(true);\r\n    } catch (err) {\r\n      setError(\"Error connecting to the backend.\");\r\n    }\r\n  };\r\n\r\n  const chartData = data.map((item) => ({\r\n    month: monthNames[item.month - 1],\r\n    level: item.level === \"Low\" ? 1 : item.level === \"Moderate\" ? 2 : 3\r\n  }));\r\n\r\n  return (\r\n    <div\r\n      className=\"container\"\r\n      style={{\r\n        backgroundImage: `url(${irrigationBg})`,\r\n        backgroundSize: \"cover\",\r\n        minHeight: \"100vh\",\r\n        padding: \"20px\",\r\n        color: \"#fff\",\r\n        textShadow: \"0 0 5px #000\"\r\n      }}\r\n    >\r\n      <h1>Groundwater Level Forecast</h1>\r\n      <div className=\"header-with-gif\">\r\n  <img\r\n    src=\"https://c.tenor.com/sr8g_XsZYDEAAAAC/raining-sparkle.gif\"\r\n    alt=\"Water drop animation\"\r\n    className=\"water-drop-gif\"\r\n  />\r\n</div>\r\n\r\n\r\n      {/* Location Selector */}\r\n      <div className=\"form-group\">\r\n        <label>Select Location:</label>\r\n        <select\r\n          value={selectedLocation}\r\n          onChange={(e) => setSelectedLocation(e.target.value)}\r\n        >\r\n          <option value=\"\">-- Or enter manually --</option>\r\n          {sampleLocations.map((loc) => (\r\n            <option key={loc.name} value={loc.name}>\r\n              {loc.name}\r\n            </option>\r\n          ))}\r\n        </select>\r\n      </div>\r\n\r\n      {!selectedLocation && (\r\n        <>\r\n          <div className=\"form-group\">\r\n            <label>Latitude (-90 to 90):</label>\r\n            <input\r\n              type=\"number\"\r\n              value={latitude}\r\n              onChange={(e) => setLatitude(e.target.value)}\r\n              placeholder=\"Enter latitude\"\r\n            />\r\n          </div>\r\n\r\n          <div className=\"form-group\">\r\n            <label>Longitude (-180 to 180):</label>\r\n            <input\r\n              type=\"number\"\r\n              value={longitude}\r\n              onChange={(e) => setLongitude(e.target.value)}\r\n              placeholder=\"Enter longitude\"\r\n            />\r\n          </div>\r\n        </>\r\n      )}\r\n\r\n      <button onClick={handlePredict}>Get Forecast</button>\r\n\r\n      {error && <div className=\"error\">{error}</div>}\r\n\r\n      {showDashboard && (\r\n        <div className=\"dashboard\">\r\n          {/* Pie Chart Section */}\r\n          <div className=\"pie-section\">\r\n            <h3>Water Level Distribution</h3>\r\n            <ResponsiveContainer width=\"100%\" height={250}>\r\n              <PieChart>\r\n                <Pie\r\n                  data={pieData()}\r\n                  dataKey=\"value\"\r\n                  nameKey=\"name\"\r\n                  cx=\"50%\"\r\n                  cy=\"50%\"\r\n                  outerRadius={80}\r\n                  label\r\n                >\r\n                  {pieData().map((entry, index) => (\r\n                    <Cell key={`cell-${index}`} fill={COLORS[index % COLORS.length]} />\r\n                  ))}\r\n                </Pie>\r\n                <Tooltip />\r\n                <Legend verticalAlign=\"bottom\" height={36} />\r\n              </PieChart>\r\n            </ResponsiveContainer>\r\n            <div className=\"level-numbers\">\r\n              {Object.entries(waterLevelCounts()).map(([level, count]) => (\r\n                <div key={level} className={`level-count ${getLevelClass(level)}`}>\r\n                  {level}: {count}\r\n                </div>\r\n              ))}\r\n            </div>\r\n          </div>\r\n\r\n          {/* Current Month Forecast Card */}\r\n          <div className=\"card\">\r\n            <h2>{monthNames[currentMonthData.month - 1]} Forecast</h2>\r\n            <p>\r\n              <strong>Groundwater Level:</strong>{\" \"}\r\n              <span className={getLevelClass(currentMonthData.level)}>\r\n                {currentMonthData.level}\r\n              </span>\r\n            </p>\r\n            <p>\r\n              <strong>Temperature:</strong> {(25 + Math.random() * 5).toFixed(1)} °C\r\n            </p>\r\n            <p>\r\n              <strong>Humidity:</strong> {(50 + Math.random() * 20).toFixed(0)} %\r\n            </p>\r\n          </div>\r\n\r\n          {/* Month Selector and Info */}\r\n          <div className=\"form-group\">\r\n            <label>Explore Another Month:</label>\r\n            <select\r\n              value={selectedMonth}\r\n              onChange={(e) => setSelectedMonth(parseInt(e.target.value))}\r\n            >\r\n              {data.map((item) => (\r\n                <option key={item.month} value={item.month}>\r\n                  {monthNames[item.month - 1]}\r\n                </option>\r\n              ))}\r\n            </select>\r\n          </div>\r\n\r\n          {selectedMonth && (\r\n            <div className=\"card\">\r\n              <h2>{monthNames[selectedMonth - 1]}</h2>\r\n              <p>\r\n                <strong>Groundwater Level:</strong>{\" \"}\r\n                <span\r\n                  className={getLevelClass(data.find((d) => d.month === selectedMonth).level)}\r\n                >\r\n                  {data.find((d) => d.month === selectedMonth).level}\r\n                </span>\r\n              </p>\r\n            </div>\r\n          )}\r\n\r\n          {/* Line Chart */}\r\n          <h3 style={{ marginTop: \"40px\" }}>Monthly Forecast Flow</h3>\r\n          <ResponsiveContainer width=\"100%\" height={300}>\r\n            <LineChart\r\n              data={chartData}\r\n              margin={{ top: 10, right: 30, left: 0, bottom: 0 }}\r\n            >\r\n              <CartesianGrid strokeDasharray=\"3 3\" />\r\n              <XAxis dataKey=\"month\" />\r\n              <YAxis\r\n                ticks={[1, 2, 3]}\r\n                domain={[0, 4]}\r\n                tickFormatter={(val) => [\"\", \"Low\", \"Moderate\", \"High\"][val]}\r\n              />\r\n              <Tooltip formatter={(value) => [\"Low\", \"Moderate\", \"High\"][value]} />\r\n              <Line type=\"monotone\" dataKey=\"level\" stroke=\"#007bff\" strokeWidth={3} />\r\n            </LineChart>\r\n          </ResponsiveContainer>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default GroundwaterDashboard;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,SACEC,SAAS,EAAEC,IAAI,EAAEC,KAAK,EAAEC,KAAK,EAAEC,aAAa,EAAEC,OAAO,EAAEC,mBAAmB,EAC1EC,QAAQ,EAAEC,GAAG,EAAEC,IAAI,EAAEC,MAAM,QACtB,UAAU;AACjB,OAAO,yBAAyB;AAChC,OAAOC,YAAY,MAAM,6BAA6B;AAAC,SAAAC,MAAA,IAAAC,OAAA,EAAAC,QAAA,IAAAC,SAAA;AAEvD,MAAMC,MAAM,GAAG,CAAC,SAAS,EAAE,SAAS,EAAE,SAAS,CAAC;AAEhD,MAAMC,oBAAoB,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACjC,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGtB,QAAQ,CAAC,EAAE,CAAC;EAC5C,MAAM,CAACuB,SAAS,EAAEC,YAAY,CAAC,GAAGxB,QAAQ,CAAC,EAAE,CAAC;EAC9C,MAAM,CAACyB,KAAK,EAAEC,QAAQ,CAAC,GAAG1B,QAAQ,CAAC,EAAE,CAAC;EACtC,MAAM,CAAC2B,IAAI,EAAEC,OAAO,CAAC,GAAG5B,QAAQ,CAAC,EAAE,CAAC;EACpC,MAAM,CAAC6B,gBAAgB,EAAEC,mBAAmB,CAAC,GAAG9B,QAAQ,CAAC,IAAI,CAAC;EAC9D,MAAM,CAAC+B,aAAa,EAAEC,gBAAgB,CAAC,GAAGhC,QAAQ,CAAC,IAAI,CAAC;EACxD,MAAM,CAACiC,aAAa,EAAEC,gBAAgB,CAAC,GAAGlC,QAAQ,CAAC,KAAK,CAAC;;EAEzD;EACA,MAAMmC,eAAe,GAAG,CACtB;IAAEC,IAAI,EAAE,WAAW;IAAEC,GAAG,EAAE,OAAO;IAAEC,GAAG,EAAE;EAAQ,CAAC,EACjD;IAAEF,IAAI,EAAE,WAAW;IAAEC,GAAG,EAAE,OAAO;IAAEC,GAAG,EAAE;EAAQ,CAAC,EACjD;IAAEF,IAAI,EAAE,WAAW;IAAEC,GAAG,EAAE,OAAO;IAAEC,GAAG,EAAE;EAAQ,CAAC,CAClD;EACD,MAAM,CAACC,gBAAgB,EAAEC,mBAAmB,CAAC,GAAGxC,QAAQ,CAAC,EAAE,CAAC;EAE5D,MAAMyC,UAAU,GAAG,CACjB,SAAS,EAAE,UAAU,EAAE,OAAO,EAAE,OAAO,EAAE,KAAK,EAAE,MAAM,EACtD,MAAM,EAAE,QAAQ,EAAE,WAAW,EAAE,SAAS,EAAE,UAAU,EAAE,UAAU,CACjE;EAED,MAAMC,aAAa,GAAIC,KAAK,IAAK;IAC/B,MAAMC,CAAC,GAAGD,KAAK,CAACE,WAAW,CAAC,CAAC;IAC7B,IAAID,CAAC,KAAK,KAAK,EAAE,OAAO,YAAY;IACpC,IAAIA,CAAC,KAAK,UAAU,EAAE,OAAO,gBAAgB;IAC7C,IAAIA,CAAC,KAAK,MAAM,EAAE,OAAO,YAAY;IACrC,OAAO,EAAE;EACX,CAAC;;EAED;EACA,MAAME,gBAAgB,GAAGA,CAAA,KAAM;IAC7B,MAAMC,MAAM,GAAG;MAAEC,GAAG,EAAE,CAAC;MAAEC,QAAQ,EAAE,CAAC;MAAEC,IAAI,EAAE;IAAE,CAAC;IAC/CvB,IAAI,CAACwB,OAAO,CAAEC,CAAC,IAAK;MAClB,MAAMC,GAAG,GAAGD,CAAC,CAACT,KAAK;MACnB,IAAII,MAAM,CAACM,GAAG,CAAC,KAAKC,SAAS,EAAEP,MAAM,CAACM,GAAG,CAAC,EAAE;IAC9C,CAAC,CAAC;IACF,OAAON,MAAM;EACf,CAAC;EAED,MAAMQ,OAAO,GAAGA,CAAA,KAAM;IACpB,MAAMR,MAAM,GAAGD,gBAAgB,CAAC,CAAC;IACjC,OAAO,CACL;MAAEV,IAAI,EAAE,KAAK;MAAEoB,KAAK,EAAET,MAAM,CAACC;IAAI,CAAC,EAClC;MAAEZ,IAAI,EAAE,UAAU;MAAEoB,KAAK,EAAET,MAAM,CAACE;IAAS,CAAC,EAC5C;MAAEb,IAAI,EAAE,MAAM;MAAEoB,KAAK,EAAET,MAAM,CAACG;IAAK,CAAC,CACrC;EACH,CAAC;EAED,MAAMO,aAAa,GAAG,MAAAA,CAAA,KAAY;IAChC,IAAIpB,GAAG,EAAEC,GAAG;IAEZZ,QAAQ,CAAC,EAAE,CAAC;IACZQ,gBAAgB,CAAC,KAAK,CAAC;IACvBJ,mBAAmB,CAAC,IAAI,CAAC;IACzBE,gBAAgB,CAAC,IAAI,CAAC;IACtBJ,OAAO,CAAC,EAAE,CAAC;;IAEX;IACA,IAAIW,gBAAgB,EAAE;MACpB,MAAMmB,GAAG,GAAGvB,eAAe,CAACwB,IAAI,CAACD,GAAG,IAAIA,GAAG,CAACtB,IAAI,KAAKG,gBAAgB,CAAC;MACtEF,GAAG,GAAGqB,GAAG,CAACrB,GAAG;MACbC,GAAG,GAAGoB,GAAG,CAACpB,GAAG;MACbhB,WAAW,CAACe,GAAG,CAAC;MAChBb,YAAY,CAACc,GAAG,CAAC;IACnB,CAAC,MAAM;MACLD,GAAG,GAAGuB,UAAU,CAACvC,QAAQ,CAAC;MAC1BiB,GAAG,GAAGsB,UAAU,CAACrC,SAAS,CAAC;IAC7B;IAEA,IAAIsC,KAAK,CAACxB,GAAG,CAAC,IAAIA,GAAG,GAAG,CAAC,EAAE,IAAIA,GAAG,GAAG,EAAE,EAAE;MACvCX,QAAQ,CAAC,oCAAoC,CAAC;MAC9C;IACF;IACA,IAAImC,KAAK,CAACvB,GAAG,CAAC,IAAIA,GAAG,GAAG,CAAC,GAAG,IAAIA,GAAG,GAAG,GAAG,EAAE;MACzCZ,QAAQ,CAAC,uCAAuC,CAAC;MACjD;IACF;IAEA,IAAI;MACF,MAAMoC,GAAG,GAAG,MAAMC,KAAK,CAAC,+BAA+B,EAAE;QACvDC,MAAM,EAAE,MAAM;QACdC,OAAO,EAAE;UAAE,cAAc,EAAE;QAAmB,CAAC;QAC/CC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;UAAE/C,QAAQ,EAAEgB,GAAG;UAAEd,SAAS,EAAEe;QAAI,CAAC;MACxD,CAAC,CAAC;MACF,IAAI,CAACwB,GAAG,CAACO,EAAE,EAAE;QACX,MAAMC,GAAG,GAAG,MAAMR,GAAG,CAACS,IAAI,CAAC,CAAC;QAC5B7C,QAAQ,CAAC4C,GAAG,CAAC7C,KAAK,IAAI,uBAAuB,CAAC;QAC9C;MACF;MACA,MAAM+C,MAAM,GAAG,MAAMV,GAAG,CAACS,IAAI,CAAC,CAAC;MAC/B3C,OAAO,CAAC4C,MAAM,CAAC;MAEf,MAAMC,YAAY,GAAG,IAAIC,IAAI,CAAC,CAAC,CAACC,QAAQ,CAAC,CAAC,GAAG,CAAC;MAC9C,MAAMC,OAAO,GAAGJ,MAAM,CAACb,IAAI,CAAEP,CAAC,IAAKA,CAAC,CAACyB,KAAK,KAAKJ,YAAY,CAAC;MAC5D3C,mBAAmB,CAAC8C,OAAO,CAAC;MAC5B5C,gBAAgB,CAACyC,YAAY,CAAC;MAC9BvC,gBAAgB,CAAC,IAAI,CAAC;IACxB,CAAC,CAAC,OAAOoC,GAAG,EAAE;MACZ5C,QAAQ,CAAC,kCAAkC,CAAC;IAC9C;EACF,CAAC;EAED,MAAMoD,SAAS,GAAGnD,IAAI,CAACoD,GAAG,CAAEC,IAAI,KAAM;IACpCH,KAAK,EAAEpC,UAAU,CAACuC,IAAI,CAACH,KAAK,GAAG,CAAC,CAAC;IACjClC,KAAK,EAAEqC,IAAI,CAACrC,KAAK,KAAK,KAAK,GAAG,CAAC,GAAGqC,IAAI,CAACrC,KAAK,KAAK,UAAU,GAAG,CAAC,GAAG;EACpE,CAAC,CAAC,CAAC;EAEH,oBACE5B,OAAA;IACEkE,SAAS,EAAC,WAAW;IACrBC,KAAK,EAAE;MACLC,eAAe,EAAE,OAAOtE,YAAY,GAAG;MACvCuE,cAAc,EAAE,OAAO;MACvBC,SAAS,EAAE,OAAO;MAClBC,OAAO,EAAE,MAAM;MACfC,KAAK,EAAE,MAAM;MACbC,UAAU,EAAE;IACd,CAAE;IAAAC,QAAA,gBAEF1E,OAAA;MAAA0E,QAAA,EAAI;IAA0B;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eACnC9E,OAAA;MAAKkE,SAAS,EAAC,iBAAiB;MAAAQ,QAAA,eACpC1E,OAAA;QACE+E,GAAG,EAAC,0DAA0D;QAC9DC,GAAG,EAAC,sBAAsB;QAC1Bd,SAAS,EAAC;MAAgB;QAAAS,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAC3B;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACC,CAAC,eAIA9E,OAAA;MAAKkE,SAAS,EAAC,YAAY;MAAAQ,QAAA,gBACzB1E,OAAA;QAAA0E,QAAA,EAAO;MAAgB;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAO,CAAC,eAC/B9E,OAAA;QACEyC,KAAK,EAAEjB,gBAAiB;QACxByD,QAAQ,EAAGC,CAAC,IAAKzD,mBAAmB,CAACyD,CAAC,CAACC,MAAM,CAAC1C,KAAK,CAAE;QAAAiC,QAAA,gBAErD1E,OAAA;UAAQyC,KAAK,EAAC,EAAE;UAAAiC,QAAA,EAAC;QAAuB;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC,EAChD1D,eAAe,CAAC4C,GAAG,CAAErB,GAAG,iBACvB3C,OAAA;UAAuByC,KAAK,EAAEE,GAAG,CAACtB,IAAK;UAAAqD,QAAA,EACpC/B,GAAG,CAACtB;QAAI,GADEsB,GAAG,CAACtB,IAAI;UAAAsD,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAEb,CACT,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACI,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACN,CAAC,EAEL,CAACtD,gBAAgB,iBAChBxB,OAAA,CAAAE,SAAA;MAAAwE,QAAA,gBACE1E,OAAA;QAAKkE,SAAS,EAAC,YAAY;QAAAQ,QAAA,gBACzB1E,OAAA;UAAA0E,QAAA,EAAO;QAAqB;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAO,CAAC,eACpC9E,OAAA;UACEoF,IAAI,EAAC,QAAQ;UACb3C,KAAK,EAAEnC,QAAS;UAChB2E,QAAQ,EAAGC,CAAC,IAAK3E,WAAW,CAAC2E,CAAC,CAACC,MAAM,CAAC1C,KAAK,CAAE;UAC7C4C,WAAW,EAAC;QAAgB;UAAAV,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAC7B,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACC,CAAC,eAEN9E,OAAA;QAAKkE,SAAS,EAAC,YAAY;QAAAQ,QAAA,gBACzB1E,OAAA;UAAA0E,QAAA,EAAO;QAAwB;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAO,CAAC,eACvC9E,OAAA;UACEoF,IAAI,EAAC,QAAQ;UACb3C,KAAK,EAAEjC,SAAU;UACjByE,QAAQ,EAAGC,CAAC,IAAKzE,YAAY,CAACyE,CAAC,CAACC,MAAM,CAAC1C,KAAK,CAAE;UAC9C4C,WAAW,EAAC;QAAiB;UAAAV,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAC9B,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACC,CAAC;IAAA,eACN,CACH,eAED9E,OAAA;MAAQsF,OAAO,EAAE5C,aAAc;MAAAgC,QAAA,EAAC;IAAY;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC,EAEpDpE,KAAK,iBAAIV,OAAA;MAAKkE,SAAS,EAAC,OAAO;MAAAQ,QAAA,EAAEhE;IAAK;MAAAiE,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAM,CAAC,EAE7C5D,aAAa,iBACZlB,OAAA;MAAKkE,SAAS,EAAC,WAAW;MAAAQ,QAAA,gBAExB1E,OAAA;QAAKkE,SAAS,EAAC,aAAa;QAAAQ,QAAA,gBAC1B1E,OAAA;UAAA0E,QAAA,EAAI;QAAwB;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAI,CAAC,eACjC9E,OAAA,CAACP,mBAAmB;UAAC8F,KAAK,EAAC,MAAM;UAACC,MAAM,EAAE,GAAI;UAAAd,QAAA,eAC5C1E,OAAA,CAACN,QAAQ;YAAAgF,QAAA,gBACP1E,OAAA,CAACL,GAAG;cACFiB,IAAI,EAAE4B,OAAO,CAAC,CAAE;cAChBiD,OAAO,EAAC,OAAO;cACfC,OAAO,EAAC,MAAM;cACdC,EAAE,EAAC,KAAK;cACRC,EAAE,EAAC,KAAK;cACRC,WAAW,EAAE,EAAG;cAChBC,KAAK;cAAApB,QAAA,EAEJlC,OAAO,CAAC,CAAC,CAACwB,GAAG,CAAC,CAAC+B,KAAK,EAAEC,KAAK,kBAC1BhG,OAAA,CAACJ,IAAI;gBAAuBqG,IAAI,EAAE9F,MAAM,CAAC6F,KAAK,GAAG7F,MAAM,CAAC+F,MAAM;cAAE,GAArD,QAAQF,KAAK,EAAE;gBAAArB,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAwC,CACnE;YAAC;cAAAH,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OACC,CAAC,eACN9E,OAAA,CAACR,OAAO;cAAAmF,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAE,CAAC,eACX9E,OAAA,CAACH,MAAM;cAACsG,aAAa,EAAC,QAAQ;cAACX,MAAM,EAAE;YAAG;cAAAb,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAE,CAAC;UAAA;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACrC;QAAC;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACQ,CAAC,eACtB9E,OAAA;UAAKkE,SAAS,EAAC,eAAe;UAAAQ,QAAA,EAC3B0B,MAAM,CAACC,OAAO,CAACtE,gBAAgB,CAAC,CAAC,CAAC,CAACiC,GAAG,CAAC,CAAC,CAACpC,KAAK,EAAE0E,KAAK,CAAC,kBACrDtG,OAAA;YAAiBkE,SAAS,EAAE,eAAevC,aAAa,CAACC,KAAK,CAAC,EAAG;YAAA8C,QAAA,GAC/D9C,KAAK,EAAC,IAAE,EAAC0E,KAAK;UAAA,GADP1E,KAAK;YAAA+C,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAEV,CACN;QAAC;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACC,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACH,CAAC,eAGN9E,OAAA;QAAKkE,SAAS,EAAC,MAAM;QAAAQ,QAAA,gBACnB1E,OAAA;UAAA0E,QAAA,GAAKhD,UAAU,CAACZ,gBAAgB,CAACgD,KAAK,GAAG,CAAC,CAAC,EAAC,WAAS;QAAA;UAAAa,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAI,CAAC,eAC1D9E,OAAA;UAAA0E,QAAA,gBACE1E,OAAA;YAAA0E,QAAA,EAAQ;UAAkB;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAQ,CAAC,EAAC,GAAG,eACvC9E,OAAA;YAAMkE,SAAS,EAAEvC,aAAa,CAACb,gBAAgB,CAACc,KAAK,CAAE;YAAA8C,QAAA,EACpD5D,gBAAgB,CAACc;UAAK;YAAA+C,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACnB,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACN,CAAC,eACJ9E,OAAA;UAAA0E,QAAA,gBACE1E,OAAA;YAAA0E,QAAA,EAAQ;UAAY;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAQ,CAAC,KAAC,EAAC,CAAC,EAAE,GAAGyB,IAAI,CAACC,MAAM,CAAC,CAAC,GAAG,CAAC,EAAEC,OAAO,CAAC,CAAC,CAAC,EAAC,QACrE;QAAA;UAAA9B,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAG,CAAC,eACJ9E,OAAA;UAAA0E,QAAA,gBACE1E,OAAA;YAAA0E,QAAA,EAAQ;UAAS;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAQ,CAAC,KAAC,EAAC,CAAC,EAAE,GAAGyB,IAAI,CAACC,MAAM,CAAC,CAAC,GAAG,EAAE,EAAEC,OAAO,CAAC,CAAC,CAAC,EAAC,IACnE;QAAA;UAAA9B,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAG,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACD,CAAC,eAGN9E,OAAA;QAAKkE,SAAS,EAAC,YAAY;QAAAQ,QAAA,gBACzB1E,OAAA;UAAA0E,QAAA,EAAO;QAAsB;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAO,CAAC,eACrC9E,OAAA;UACEyC,KAAK,EAAEzB,aAAc;UACrBiE,QAAQ,EAAGC,CAAC,IAAKjE,gBAAgB,CAACyF,QAAQ,CAACxB,CAAC,CAACC,MAAM,CAAC1C,KAAK,CAAC,CAAE;UAAAiC,QAAA,EAE3D9D,IAAI,CAACoD,GAAG,CAAEC,IAAI,iBACbjE,OAAA;YAAyByC,KAAK,EAAEwB,IAAI,CAACH,KAAM;YAAAY,QAAA,EACxChD,UAAU,CAACuC,IAAI,CAACH,KAAK,GAAG,CAAC;UAAC,GADhBG,IAAI,CAACH,KAAK;YAAAa,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAEf,CACT;QAAC;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACI,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACN,CAAC,EAEL9D,aAAa,iBACZhB,OAAA;QAAKkE,SAAS,EAAC,MAAM;QAAAQ,QAAA,gBACnB1E,OAAA;UAAA0E,QAAA,EAAKhD,UAAU,CAACV,aAAa,GAAG,CAAC;QAAC;UAAA2D,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAK,CAAC,eACxC9E,OAAA;UAAA0E,QAAA,gBACE1E,OAAA;YAAA0E,QAAA,EAAQ;UAAkB;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAQ,CAAC,EAAC,GAAG,eACvC9E,OAAA;YACEkE,SAAS,EAAEvC,aAAa,CAACf,IAAI,CAACgC,IAAI,CAAEP,CAAC,IAAKA,CAAC,CAACyB,KAAK,KAAK9C,aAAa,CAAC,CAACY,KAAK,CAAE;YAAA8C,QAAA,EAE3E9D,IAAI,CAACgC,IAAI,CAAEP,CAAC,IAAKA,CAAC,CAACyB,KAAK,KAAK9C,aAAa,CAAC,CAACY;UAAK;YAAA+C,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAC9C,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACN,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACD,CACN,eAGD9E,OAAA;QAAImE,KAAK,EAAE;UAAEwC,SAAS,EAAE;QAAO,CAAE;QAAAjC,QAAA,EAAC;MAAqB;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eAC5D9E,OAAA,CAACP,mBAAmB;QAAC8F,KAAK,EAAC,MAAM;QAACC,MAAM,EAAE,GAAI;QAAAd,QAAA,eAC5C1E,OAAA,CAACb,SAAS;UACRyB,IAAI,EAAEmD,SAAU;UAChB6C,MAAM,EAAE;YAAEC,GAAG,EAAE,EAAE;YAAEC,KAAK,EAAE,EAAE;YAAEC,IAAI,EAAE,CAAC;YAAEC,MAAM,EAAE;UAAE,CAAE;UAAAtC,QAAA,gBAEnD1E,OAAA,CAACT,aAAa;YAAC0H,eAAe,EAAC;UAAK;YAAAtC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAE,CAAC,eACvC9E,OAAA,CAACX,KAAK;YAACoG,OAAO,EAAC;UAAO;YAAAd,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAE,CAAC,eACzB9E,OAAA,CAACV,KAAK;YACJ4H,KAAK,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAE;YACjBC,MAAM,EAAE,CAAC,CAAC,EAAE,CAAC,CAAE;YACfC,aAAa,EAAGC,GAAG,IAAK,CAAC,EAAE,EAAE,KAAK,EAAE,UAAU,EAAE,MAAM,CAAC,CAACA,GAAG;UAAE;YAAA1C,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAC9D,CAAC,eACF9E,OAAA,CAACR,OAAO;YAAC8H,SAAS,EAAG7E,KAAK,IAAK,CAAC,KAAK,EAAE,UAAU,EAAE,MAAM,CAAC,CAACA,KAAK;UAAE;YAAAkC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAE,CAAC,eACrE9E,OAAA,CAACZ,IAAI;YAACgG,IAAI,EAAC,UAAU;YAACK,OAAO,EAAC,OAAO;YAAC8B,MAAM,EAAC,SAAS;YAACC,WAAW,EAAE;UAAE;YAAA7C,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAE,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAChE;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACO,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACnB,CACN;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACE,CAAC;AAEV,CAAC;AAACzE,EAAA,CAnRID,oBAAoB;AAAAqH,EAAA,GAApBrH,oBAAoB;AAqR1B,eAAeA,oBAAoB;AAAC,IAAAqH,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}