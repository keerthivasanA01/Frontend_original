{"ast":null,"code":"import React,{useState,useEffect}from\"react\";import{LineChart,Line,XAxis,YAxis,CartesianGrid,Tooltip,ResponsiveContainer,PieChart,Pie,Cell,Legend}from\"recharts\";import\"../styles/Dashboard.css\";import irrigationBg from\"../assets/irrigation-bg.jpg\";import{jsx as _jsx,jsxs as _jsxs,Fragment as _Fragment}from\"react/jsx-runtime\";const COLORS=[\"#0088FE\",\"#00C49F\",\"#FF8042\"];const GroundwaterDashboard=()=>{const[latitude,setLatitude]=useState(\"\");const[longitude,setLongitude]=useState(\"\");const[error,setError]=useState(\"\");const[data,setData]=useState([]);const[currentMonthData,setCurrentMonthData]=useState(null);const[selectedMonth,setSelectedMonth]=useState(null);const[showDashboard,setShowDashboard]=useState(false);// For filtering by location (you can expand this with your real locations)\nconst sampleLocations=[{name:\"Village A\",lat:12.9716,lon:77.5946},{name:\"Village B\",lat:28.7041,lon:77.1025},{name:\"Village C\",lat:19.0760,lon:72.8777}];const[selectedLocation,setSelectedLocation]=useState(\"\");const monthNames=[\"January\",\"February\",\"March\",\"April\",\"May\",\"June\",\"July\",\"August\",\"September\",\"October\",\"November\",\"December\"];const getLevelClass=level=>{const l=level.toLowerCase();if(l===\"low\")return\"level- low\";if(l===\"moderate\")return\"level-moderate\";if(l===\"high\")return\"level-high\";return\"\";};// Helper to count how many months are Low/Moderate/High\nconst waterLevelCounts=()=>{const counts={Low:0,Moderate:0,High:0};data.forEach(d=>{const lvl=d.level;if(counts[lvl]!==undefined)counts[lvl]++;});return counts;};const pieData=()=>{const counts=waterLevelCounts();return[{name:\"Low\",value:counts.Low},{name:\"Moderate\",value:counts.Moderate},{name:\"High\",value:counts.High}];};const handlePredict=async()=>{let lat,lon;setError(\"\");setShowDashboard(false);setCurrentMonthData(null);setSelectedMonth(null);setData([]);// If location selected from dropdown, use that\nif(selectedLocation){const loc=sampleLocations.find(loc=>loc.name===selectedLocation);lat=loc.lat;lon=loc.lon;setLatitude(lat);setLongitude(lon);}else{lat=parseFloat(latitude);lon=parseFloat(longitude);}if(isNaN(lat)||lat<-90||lat>90){setError(\"Enter a valid latitude (-90 to 90)\");return;}if(isNaN(lon)||lon<-180||lon>180){setError(\"Enter a valid longitude (-180 to 180)\");return;}try{const res=await fetch(\"http://localhost:5000/predict\",{method:\"POST\",headers:{\"Content-Type\":\"application/json\"},body:JSON.stringify({latitude:lat,longitude:lon})});if(!res.ok){const err=await res.json();setError(err.error||\"Something went wrong.\");return;}const result=await res.json();setData(result);const currentMonth=new Date().getMonth()+1;const current=result.find(d=>d.month===currentMonth);setCurrentMonthData(current);setSelectedMonth(currentMonth);setShowDashboard(true);}catch(err){setError(\"Error connecting to the backend.\");}};const chartData=data.map(item=>({month:monthNames[item.month-1],level:item.level===\"Low\"?1:item.level===\"Moderate\"?2:3}));return/*#__PURE__*/_jsxs(\"div\",{className:\"container\",style:{backgroundImage:\"url(\".concat(irrigationBg,\")\"),backgroundSize:\"cover\",minHeight:\"100vh\",padding:\"20px\",color:\"#fff\",textShadow:\"0 0 5px #000\"},children:[/*#__PURE__*/_jsx(\"h1\",{children:\"Groundwater Level Forecast\"}),/*#__PURE__*/_jsx(\"div\",{className:\"header-with-gif\",children:/*#__PURE__*/_jsx(\"img\",{src:\"https://c.tenor.com/sr8g_XsZYDEAAAAC/raining-sparkle.gif\",alt:\"Water drop animation\",className:\"water-drop-gif\"})}),/*#__PURE__*/_jsxs(\"div\",{className:\"form-group\",children:[/*#__PURE__*/_jsx(\"label\",{children:\"Select Location:\"}),/*#__PURE__*/_jsxs(\"select\",{value:selectedLocation,onChange:e=>setSelectedLocation(e.target.value),children:[/*#__PURE__*/_jsx(\"option\",{value:\"\",children:\"-- Or enter manually --\"}),sampleLocations.map(loc=>/*#__PURE__*/_jsx(\"option\",{value:loc.name,children:loc.name},loc.name))]})]}),!selectedLocation&&/*#__PURE__*/_jsxs(_Fragment,{children:[/*#__PURE__*/_jsxs(\"div\",{className:\"form-group\",children:[/*#__PURE__*/_jsx(\"label\",{children:\"Latitude (-90 to 90):\"}),/*#__PURE__*/_jsx(\"input\",{type:\"number\",value:latitude,onChange:e=>setLatitude(e.target.value),placeholder:\"Enter latitude\"})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"form-group\",children:[/*#__PURE__*/_jsx(\"label\",{children:\"Longitude (-180 to 180):\"}),/*#__PURE__*/_jsx(\"input\",{type:\"number\",value:longitude,onChange:e=>setLongitude(e.target.value),placeholder:\"Enter longitude\"})]})]}),/*#__PURE__*/_jsx(\"button\",{onClick:handlePredict,children:\"Get Forecast\"}),error&&/*#__PURE__*/_jsx(\"div\",{className:\"error\",children:error}),showDashboard&&/*#__PURE__*/_jsxs(\"div\",{className:\"dashboard\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"pie-section\",children:[/*#__PURE__*/_jsx(\"h3\",{children:\"Water Level Distribution\"}),/*#__PURE__*/_jsx(ResponsiveContainer,{width:\"100%\",height:250,children:/*#__PURE__*/_jsxs(PieChart,{children:[/*#__PURE__*/_jsx(Pie,{data:pieData(),dataKey:\"value\",nameKey:\"name\",cx:\"50%\",cy:\"50%\",outerRadius:80,label:true,children:pieData().map((entry,index)=>/*#__PURE__*/_jsx(Cell,{fill:COLORS[index%COLORS.length]},\"cell-\".concat(index)))}),/*#__PURE__*/_jsx(Tooltip,{}),/*#__PURE__*/_jsx(Legend,{verticalAlign:\"bottom\",height:36})]})}),/*#__PURE__*/_jsx(\"div\",{className:\"level-numbers\",children:Object.entries(waterLevelCounts()).map(_ref=>{let[level,count]=_ref;return/*#__PURE__*/_jsxs(\"div\",{className:\"level-count \".concat(getLevelClass(level)),children:[level,\": \",count]},level);})})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"card\",children:[/*#__PURE__*/_jsxs(\"h2\",{children:[monthNames[currentMonthData.month-1],\" Forecast\"]}),/*#__PURE__*/_jsxs(\"p\",{children:[/*#__PURE__*/_jsx(\"strong\",{children:\"Groundwater Level:\"}),\" \",/*#__PURE__*/_jsx(\"span\",{className:getLevelClass(currentMonthData.level),children:currentMonthData.level})]}),/*#__PURE__*/_jsxs(\"p\",{children:[/*#__PURE__*/_jsx(\"strong\",{children:\"Temperature:\"}),\" \",(25+Math.random()*5).toFixed(1),\" \\xB0C\"]}),/*#__PURE__*/_jsxs(\"p\",{children:[/*#__PURE__*/_jsx(\"strong\",{children:\"Humidity:\"}),\" \",(50+Math.random()*20).toFixed(0),\" %\"]})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"form-group\",children:[/*#__PURE__*/_jsx(\"label\",{children:\"Explore Another Month:\"}),/*#__PURE__*/_jsx(\"select\",{value:selectedMonth,onChange:e=>setSelectedMonth(parseInt(e.target.value)),children:data.map(item=>/*#__PURE__*/_jsx(\"option\",{value:item.month,children:monthNames[item.month-1]},item.month))})]}),selectedMonth&&/*#__PURE__*/_jsxs(\"div\",{className:\"card\",children:[/*#__PURE__*/_jsx(\"h2\",{children:monthNames[selectedMonth-1]}),/*#__PURE__*/_jsxs(\"p\",{children:[/*#__PURE__*/_jsx(\"strong\",{children:\"Groundwater Level:\"}),\" \",/*#__PURE__*/_jsx(\"span\",{className:getLevelClass(data.find(d=>d.month===selectedMonth).level),children:data.find(d=>d.month===selectedMonth).level})]})]}),/*#__PURE__*/_jsx(\"h3\",{style:{marginTop:\"40px\"},children:\"Monthly Forecast Flow\"}),/*#__PURE__*/_jsx(ResponsiveContainer,{width:\"100%\",height:300,children:/*#__PURE__*/_jsxs(LineChart,{data:chartData,margin:{top:10,right:30,left:0,bottom:0},children:[/*#__PURE__*/_jsx(CartesianGrid,{strokeDasharray:\"3 3\"}),/*#__PURE__*/_jsx(XAxis,{dataKey:\"month\"}),/*#__PURE__*/_jsx(YAxis,{ticks:[1,2,3],domain:[1,3],tickFormatter:val=>{const levelMap={1:\"Low\",2:\"Moderate\",3:\"High\"};return levelMap[val]||\"\";}}),/*#__PURE__*/_jsx(Tooltip,{formatter:value=>{const levelMap={1:\"Low\",2:\"Moderate\",3:\"High\"};return levelMap[value]||\"\";}}),/*#__PURE__*/_jsx(Line,{type:\"monotone\",dataKey:\"level\",stroke:\"#007bff\",strokeWidth:3})]})})]})]});};export default GroundwaterDashboard;","map":{"version":3,"names":["React","useState","useEffect","LineChart","Line","XAxis","YAxis","CartesianGrid","Tooltip","ResponsiveContainer","PieChart","Pie","Cell","Legend","irrigationBg","jsx","_jsx","jsxs","_jsxs","Fragment","_Fragment","COLORS","GroundwaterDashboard","latitude","setLatitude","longitude","setLongitude","error","setError","data","setData","currentMonthData","setCurrentMonthData","selectedMonth","setSelectedMonth","showDashboard","setShowDashboard","sampleLocations","name","lat","lon","selectedLocation","setSelectedLocation","monthNames","getLevelClass","level","l","toLowerCase","waterLevelCounts","counts","Low","Moderate","High","forEach","d","lvl","undefined","pieData","value","handlePredict","loc","find","parseFloat","isNaN","res","fetch","method","headers","body","JSON","stringify","ok","err","json","result","currentMonth","Date","getMonth","current","month","chartData","map","item","className","style","backgroundImage","concat","backgroundSize","minHeight","padding","color","textShadow","children","src","alt","onChange","e","target","type","placeholder","onClick","width","height","dataKey","nameKey","cx","cy","outerRadius","label","entry","index","fill","length","verticalAlign","Object","entries","_ref","count","Math","random","toFixed","parseInt","marginTop","margin","top","right","left","bottom","strokeDasharray","ticks","domain","tickFormatter","val","levelMap","formatter","stroke","strokeWidth"],"sources":["C:/Users/akeer/Downloads/streamlit/frontend/irrigation_monitoring/src/components/GroundwaterDashboard.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport {\r\n  LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer,\r\n  PieChart, Pie, Cell, Legend\r\n} from \"recharts\";\r\nimport \"../styles/Dashboard.css\";\r\nimport irrigationBg from \"../assets/irrigation-bg.jpg\";\r\n\r\nconst COLORS = [\"#0088FE\", \"#00C49F\", \"#FF8042\"];\r\n\r\nconst GroundwaterDashboard = () => {\r\n  const [latitude, setLatitude] = useState(\"\");\r\n  const [longitude, setLongitude] = useState(\"\");\r\n  const [error, setError] = useState(\"\");\r\n  const [data, setData] = useState([]);\r\n  const [currentMonthData, setCurrentMonthData] = useState(null);\r\n  const [selectedMonth, setSelectedMonth] = useState(null);\r\n  const [showDashboard, setShowDashboard] = useState(false);\r\n\r\n  // For filtering by location (you can expand this with your real locations)\r\n  const sampleLocations = [\r\n    { name: \"Village A\", lat: 12.9716, lon: 77.5946 },\r\n    { name: \"Village B\", lat: 28.7041, lon: 77.1025 },\r\n    { name: \"Village C\", lat: 19.0760, lon: 72.8777 },\r\n  ];\r\n  const [selectedLocation, setSelectedLocation] = useState(\"\");\r\n\r\n  const monthNames = [\r\n    \"January\", \"February\", \"March\", \"April\", \"May\", \"June\",\r\n    \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"\r\n  ];\r\n\r\n  const getLevelClass = (level) => {\r\n    const l = level.toLowerCase();\r\n    if (l === \"low\") return \"level- low\";\r\n    if (l === \"moderate\") return \"level-moderate\";\r\n    if (l === \"high\") return \"level-high\";\r\n    return \"\";\r\n  };\r\n\r\n  // Helper to count how many months are Low/Moderate/High\r\n  const waterLevelCounts = () => {\r\n    const counts = { Low: 0, Moderate: 0, High: 0 };\r\n    data.forEach((d) => {\r\n      const lvl = d.level;\r\n      if (counts[lvl] !== undefined) counts[lvl]++;\r\n    });\r\n    return counts;\r\n  };\r\n\r\n  const pieData = () => {\r\n    const counts = waterLevelCounts();\r\n    return [\r\n      { name: \"Low\", value: counts.Low },\r\n      { name: \"Moderate\", value: counts.Moderate },\r\n      { name: \"High\", value: counts.High },\r\n    ];\r\n  };\r\n\r\n  const handlePredict = async () => {\r\n    let lat, lon;\r\n\r\n    setError(\"\");\r\n    setShowDashboard(false);\r\n    setCurrentMonthData(null);\r\n    setSelectedMonth(null);\r\n    setData([]);\r\n\r\n    // If location selected from dropdown, use that\r\n    if (selectedLocation) {\r\n      const loc = sampleLocations.find(loc => loc.name === selectedLocation);\r\n      lat = loc.lat;\r\n      lon = loc.lon;\r\n      setLatitude(lat);\r\n      setLongitude(lon);\r\n    } else {\r\n      lat = parseFloat(latitude);\r\n      lon = parseFloat(longitude);\r\n    }\r\n\r\n    if (isNaN(lat) || lat < -90 || lat > 90) {\r\n      setError(\"Enter a valid latitude (-90 to 90)\");\r\n      return;\r\n    }\r\n    if (isNaN(lon) || lon < -180 || lon > 180) {\r\n      setError(\"Enter a valid longitude (-180 to 180)\");\r\n      return;\r\n    }\r\n\r\n    try {\r\n      const res = await fetch(\"http://localhost:5000/predict\", {\r\n        method: \"POST\",\r\n        headers: { \"Content-Type\": \"application/json\" },\r\n        body: JSON.stringify({ latitude: lat, longitude: lon })\r\n      });\r\n      if (!res.ok) {\r\n        const err = await res.json();\r\n        setError(err.error || \"Something went wrong.\");\r\n        return;\r\n      }\r\n      const result = await res.json();\r\n      setData(result);\r\n\r\n      const currentMonth = new Date().getMonth() + 1;\r\n      const current = result.find((d) => d.month === currentMonth);\r\n      setCurrentMonthData(current);\r\n      setSelectedMonth(currentMonth);\r\n      setShowDashboard(true);\r\n    } catch (err) {\r\n      setError(\"Error connecting to the backend.\");\r\n    }\r\n  };\r\n\r\n  const chartData = data.map((item) => ({\r\n    month: monthNames[item.month - 1],\r\n    level: item.level === \"Low\" ? 1 : item.level === \"Moderate\" ? 2 : 3\r\n  }));\r\n\r\n  return (\r\n    <div\r\n      className=\"container\"\r\n      style={{\r\n        backgroundImage: `url(${irrigationBg})`,\r\n        backgroundSize: \"cover\",\r\n        minHeight: \"100vh\",\r\n        padding: \"20px\",\r\n        color: \"#fff\",\r\n        textShadow: \"0 0 5px #000\"\r\n      }}\r\n    >\r\n      <h1>Groundwater Level Forecast</h1>\r\n      <div className=\"header-with-gif\">\r\n  <img\r\n    src=\"https://c.tenor.com/sr8g_XsZYDEAAAAC/raining-sparkle.gif\"\r\n    alt=\"Water drop animation\"\r\n    className=\"water-drop-gif\"\r\n  />\r\n</div>\r\n\r\n\r\n      {/* Location Selector */}\r\n      <div className=\"form-group\">\r\n        <label>Select Location:</label>\r\n        <select\r\n          value={selectedLocation}\r\n          onChange={(e) => setSelectedLocation(e.target.value)}\r\n        >\r\n          <option value=\"\">-- Or enter manually --</option>\r\n          {sampleLocations.map((loc) => (\r\n            <option key={loc.name} value={loc.name}>\r\n              {loc.name}\r\n            </option>\r\n          ))}\r\n        </select>\r\n      </div>\r\n\r\n      {!selectedLocation && (\r\n        <>\r\n          <div className=\"form-group\">\r\n            <label>Latitude (-90 to 90):</label>\r\n            <input\r\n              type=\"number\"\r\n              value={latitude}\r\n              onChange={(e) => setLatitude(e.target.value)}\r\n              placeholder=\"Enter latitude\"\r\n            />\r\n          </div>\r\n\r\n          <div className=\"form-group\">\r\n            <label>Longitude (-180 to 180):</label>\r\n            <input\r\n              type=\"number\"\r\n              value={longitude}\r\n              onChange={(e) => setLongitude(e.target.value)}\r\n              placeholder=\"Enter longitude\"\r\n            />\r\n          </div>\r\n        </>\r\n      )}\r\n\r\n      <button onClick={handlePredict}>Get Forecast</button>\r\n\r\n      {error && <div className=\"error\">{error}</div>}\r\n\r\n      {showDashboard && (\r\n        <div className=\"dashboard\">\r\n          {/* Pie Chart Section */}\r\n          <div className=\"pie-section\">\r\n            <h3>Water Level Distribution</h3>\r\n            <ResponsiveContainer width=\"100%\" height={250}>\r\n              <PieChart>\r\n                <Pie\r\n                  data={pieData()}\r\n                  dataKey=\"value\"\r\n                  nameKey=\"name\"\r\n                  cx=\"50%\"\r\n                  cy=\"50%\"\r\n                  outerRadius={80}\r\n                  label\r\n                >\r\n                  {pieData().map((entry, index) => (\r\n                    <Cell key={`cell-${index}`} fill={COLORS[index % COLORS.length]} />\r\n                  ))}\r\n                </Pie>\r\n                <Tooltip />\r\n                <Legend verticalAlign=\"bottom\" height={36} />\r\n              </PieChart>\r\n            </ResponsiveContainer>\r\n            <div className=\"level-numbers\">\r\n              {Object.entries(waterLevelCounts()).map(([level, count]) => (\r\n                <div key={level} className={`level-count ${getLevelClass(level)}`}>\r\n                  {level}: {count}\r\n                </div>\r\n              ))}\r\n            </div>\r\n          </div>\r\n\r\n          {/* Current Month Forecast Card */}\r\n          <div className=\"card\">\r\n            <h2>{monthNames[currentMonthData.month - 1]} Forecast</h2>\r\n            <p>\r\n              <strong>Groundwater Level:</strong>{\" \"}\r\n              <span className={getLevelClass(currentMonthData.level)}>\r\n                {currentMonthData.level}\r\n              </span>\r\n            </p>\r\n            <p>\r\n              <strong>Temperature:</strong> {(25 + Math.random() * 5).toFixed(1)} °C\r\n            </p>\r\n            <p>\r\n              <strong>Humidity:</strong> {(50 + Math.random() * 20).toFixed(0)} %\r\n            </p>\r\n          </div>\r\n\r\n          {/* Month Selector and Info */}\r\n          <div className=\"form-group\">\r\n            <label>Explore Another Month:</label>\r\n            <select\r\n              value={selectedMonth}\r\n              onChange={(e) => setSelectedMonth(parseInt(e.target.value))}\r\n            >\r\n              {data.map((item) => (\r\n                <option key={item.month} value={item.month}>\r\n                  {monthNames[item.month - 1]}\r\n                </option>\r\n              ))}\r\n            </select>\r\n          </div>\r\n\r\n          {selectedMonth && (\r\n            <div className=\"card\">\r\n              <h2>{monthNames[selectedMonth - 1]}</h2>\r\n              <p>\r\n                <strong>Groundwater Level:</strong>{\" \"}\r\n                <span\r\n                  className={getLevelClass(data.find((d) => d.month === selectedMonth).level)}\r\n                >\r\n                  {data.find((d) => d.month === selectedMonth).level}\r\n                </span>\r\n              </p>\r\n            </div>\r\n          )}\r\n\r\n          {/* Line Chart */}\r\n          <h3 style={{ marginTop: \"40px\" }}>Monthly Forecast Flow</h3>\r\n          <ResponsiveContainer width=\"100%\" height={300}>\r\n            <LineChart\r\n              data={chartData}\r\n              margin={{ top: 10, right: 30, left: 0, bottom: 0 }}\r\n            >\r\n              <CartesianGrid strokeDasharray=\"3 3\" />\r\n              <XAxis dataKey=\"month\" />\r\n              <YAxis\r\n                        ticks={[1, 2, 3]}\r\n                        domain={[1, 3]}\r\n                        tickFormatter={(val) => {\r\n                          const levelMap = {\r\n                            1: \"Low\",\r\n                            2: \"Moderate\",\r\n                            3: \"High\",\r\n                          };\r\n                          return levelMap[val] || \"\";\r\n                        }}\r\n                      />\r\n\r\n              <Tooltip formatter={(value) => {\r\n                          const levelMap = {\r\n                            1: \"Low\",\r\n                            2: \"Moderate\",\r\n                            3: \"High\"\r\n                          };\r\n                          return levelMap[value] || \"\";\r\n                        }} />\r\n\r\n              <Line type=\"monotone\" dataKey=\"level\" stroke=\"#007bff\" strokeWidth={3} />\r\n            </LineChart>\r\n          </ResponsiveContainer>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default GroundwaterDashboard;\r\n"],"mappings":"AAAA,MAAO,CAAAA,KAAK,EAAIC,QAAQ,CAAEC,SAAS,KAAQ,OAAO,CAClD,OACEC,SAAS,CAAEC,IAAI,CAAEC,KAAK,CAAEC,KAAK,CAAEC,aAAa,CAAEC,OAAO,CAAEC,mBAAmB,CAC1EC,QAAQ,CAAEC,GAAG,CAAEC,IAAI,CAAEC,MAAM,KACtB,UAAU,CACjB,MAAO,yBAAyB,CAChC,MAAO,CAAAC,YAAY,KAAM,6BAA6B,CAAC,OAAAC,GAAA,IAAAC,IAAA,CAAAC,IAAA,IAAAC,KAAA,CAAAC,QAAA,IAAAC,SAAA,yBAEvD,KAAM,CAAAC,MAAM,CAAG,CAAC,SAAS,CAAE,SAAS,CAAE,SAAS,CAAC,CAEhD,KAAM,CAAAC,oBAAoB,CAAGA,CAAA,GAAM,CACjC,KAAM,CAACC,QAAQ,CAAEC,WAAW,CAAC,CAAGvB,QAAQ,CAAC,EAAE,CAAC,CAC5C,KAAM,CAACwB,SAAS,CAAEC,YAAY,CAAC,CAAGzB,QAAQ,CAAC,EAAE,CAAC,CAC9C,KAAM,CAAC0B,KAAK,CAAEC,QAAQ,CAAC,CAAG3B,QAAQ,CAAC,EAAE,CAAC,CACtC,KAAM,CAAC4B,IAAI,CAAEC,OAAO,CAAC,CAAG7B,QAAQ,CAAC,EAAE,CAAC,CACpC,KAAM,CAAC8B,gBAAgB,CAAEC,mBAAmB,CAAC,CAAG/B,QAAQ,CAAC,IAAI,CAAC,CAC9D,KAAM,CAACgC,aAAa,CAAEC,gBAAgB,CAAC,CAAGjC,QAAQ,CAAC,IAAI,CAAC,CACxD,KAAM,CAACkC,aAAa,CAAEC,gBAAgB,CAAC,CAAGnC,QAAQ,CAAC,KAAK,CAAC,CAEzD;AACA,KAAM,CAAAoC,eAAe,CAAG,CACtB,CAAEC,IAAI,CAAE,WAAW,CAAEC,GAAG,CAAE,OAAO,CAAEC,GAAG,CAAE,OAAQ,CAAC,CACjD,CAAEF,IAAI,CAAE,WAAW,CAAEC,GAAG,CAAE,OAAO,CAAEC,GAAG,CAAE,OAAQ,CAAC,CACjD,CAAEF,IAAI,CAAE,WAAW,CAAEC,GAAG,CAAE,OAAO,CAAEC,GAAG,CAAE,OAAQ,CAAC,CAClD,CACD,KAAM,CAACC,gBAAgB,CAAEC,mBAAmB,CAAC,CAAGzC,QAAQ,CAAC,EAAE,CAAC,CAE5D,KAAM,CAAA0C,UAAU,CAAG,CACjB,SAAS,CAAE,UAAU,CAAE,OAAO,CAAE,OAAO,CAAE,KAAK,CAAE,MAAM,CACtD,MAAM,CAAE,QAAQ,CAAE,WAAW,CAAE,SAAS,CAAE,UAAU,CAAE,UAAU,CACjE,CAED,KAAM,CAAAC,aAAa,CAAIC,KAAK,EAAK,CAC/B,KAAM,CAAAC,CAAC,CAAGD,KAAK,CAACE,WAAW,CAAC,CAAC,CAC7B,GAAID,CAAC,GAAK,KAAK,CAAE,MAAO,YAAY,CACpC,GAAIA,CAAC,GAAK,UAAU,CAAE,MAAO,gBAAgB,CAC7C,GAAIA,CAAC,GAAK,MAAM,CAAE,MAAO,YAAY,CACrC,MAAO,EAAE,CACX,CAAC,CAED;AACA,KAAM,CAAAE,gBAAgB,CAAGA,CAAA,GAAM,CAC7B,KAAM,CAAAC,MAAM,CAAG,CAAEC,GAAG,CAAE,CAAC,CAAEC,QAAQ,CAAE,CAAC,CAAEC,IAAI,CAAE,CAAE,CAAC,CAC/CvB,IAAI,CAACwB,OAAO,CAAEC,CAAC,EAAK,CAClB,KAAM,CAAAC,GAAG,CAAGD,CAAC,CAACT,KAAK,CACnB,GAAII,MAAM,CAACM,GAAG,CAAC,GAAKC,SAAS,CAAEP,MAAM,CAACM,GAAG,CAAC,EAAE,CAC9C,CAAC,CAAC,CACF,MAAO,CAAAN,MAAM,CACf,CAAC,CAED,KAAM,CAAAQ,OAAO,CAAGA,CAAA,GAAM,CACpB,KAAM,CAAAR,MAAM,CAAGD,gBAAgB,CAAC,CAAC,CACjC,MAAO,CACL,CAAEV,IAAI,CAAE,KAAK,CAAEoB,KAAK,CAAET,MAAM,CAACC,GAAI,CAAC,CAClC,CAAEZ,IAAI,CAAE,UAAU,CAAEoB,KAAK,CAAET,MAAM,CAACE,QAAS,CAAC,CAC5C,CAAEb,IAAI,CAAE,MAAM,CAAEoB,KAAK,CAAET,MAAM,CAACG,IAAK,CAAC,CACrC,CACH,CAAC,CAED,KAAM,CAAAO,aAAa,CAAG,KAAAA,CAAA,GAAY,CAChC,GAAI,CAAApB,GAAG,CAAEC,GAAG,CAEZZ,QAAQ,CAAC,EAAE,CAAC,CACZQ,gBAAgB,CAAC,KAAK,CAAC,CACvBJ,mBAAmB,CAAC,IAAI,CAAC,CACzBE,gBAAgB,CAAC,IAAI,CAAC,CACtBJ,OAAO,CAAC,EAAE,CAAC,CAEX;AACA,GAAIW,gBAAgB,CAAE,CACpB,KAAM,CAAAmB,GAAG,CAAGvB,eAAe,CAACwB,IAAI,CAACD,GAAG,EAAIA,GAAG,CAACtB,IAAI,GAAKG,gBAAgB,CAAC,CACtEF,GAAG,CAAGqB,GAAG,CAACrB,GAAG,CACbC,GAAG,CAAGoB,GAAG,CAACpB,GAAG,CACbhB,WAAW,CAACe,GAAG,CAAC,CAChBb,YAAY,CAACc,GAAG,CAAC,CACnB,CAAC,IAAM,CACLD,GAAG,CAAGuB,UAAU,CAACvC,QAAQ,CAAC,CAC1BiB,GAAG,CAAGsB,UAAU,CAACrC,SAAS,CAAC,CAC7B,CAEA,GAAIsC,KAAK,CAACxB,GAAG,CAAC,EAAIA,GAAG,CAAG,CAAC,EAAE,EAAIA,GAAG,CAAG,EAAE,CAAE,CACvCX,QAAQ,CAAC,oCAAoC,CAAC,CAC9C,OACF,CACA,GAAImC,KAAK,CAACvB,GAAG,CAAC,EAAIA,GAAG,CAAG,CAAC,GAAG,EAAIA,GAAG,CAAG,GAAG,CAAE,CACzCZ,QAAQ,CAAC,uCAAuC,CAAC,CACjD,OACF,CAEA,GAAI,CACF,KAAM,CAAAoC,GAAG,CAAG,KAAM,CAAAC,KAAK,CAAC,+BAA+B,CAAE,CACvDC,MAAM,CAAE,MAAM,CACdC,OAAO,CAAE,CAAE,cAAc,CAAE,kBAAmB,CAAC,CAC/CC,IAAI,CAAEC,IAAI,CAACC,SAAS,CAAC,CAAE/C,QAAQ,CAAEgB,GAAG,CAAEd,SAAS,CAAEe,GAAI,CAAC,CACxD,CAAC,CAAC,CACF,GAAI,CAACwB,GAAG,CAACO,EAAE,CAAE,CACX,KAAM,CAAAC,GAAG,CAAG,KAAM,CAAAR,GAAG,CAACS,IAAI,CAAC,CAAC,CAC5B7C,QAAQ,CAAC4C,GAAG,CAAC7C,KAAK,EAAI,uBAAuB,CAAC,CAC9C,OACF,CACA,KAAM,CAAA+C,MAAM,CAAG,KAAM,CAAAV,GAAG,CAACS,IAAI,CAAC,CAAC,CAC/B3C,OAAO,CAAC4C,MAAM,CAAC,CAEf,KAAM,CAAAC,YAAY,CAAG,GAAI,CAAAC,IAAI,CAAC,CAAC,CAACC,QAAQ,CAAC,CAAC,CAAG,CAAC,CAC9C,KAAM,CAAAC,OAAO,CAAGJ,MAAM,CAACb,IAAI,CAAEP,CAAC,EAAKA,CAAC,CAACyB,KAAK,GAAKJ,YAAY,CAAC,CAC5D3C,mBAAmB,CAAC8C,OAAO,CAAC,CAC5B5C,gBAAgB,CAACyC,YAAY,CAAC,CAC9BvC,gBAAgB,CAAC,IAAI,CAAC,CACxB,CAAE,MAAOoC,GAAG,CAAE,CACZ5C,QAAQ,CAAC,kCAAkC,CAAC,CAC9C,CACF,CAAC,CAED,KAAM,CAAAoD,SAAS,CAAGnD,IAAI,CAACoD,GAAG,CAAEC,IAAI,GAAM,CACpCH,KAAK,CAAEpC,UAAU,CAACuC,IAAI,CAACH,KAAK,CAAG,CAAC,CAAC,CACjClC,KAAK,CAAEqC,IAAI,CAACrC,KAAK,GAAK,KAAK,CAAG,CAAC,CAAGqC,IAAI,CAACrC,KAAK,GAAK,UAAU,CAAG,CAAC,CAAG,CACpE,CAAC,CAAC,CAAC,CAEH,mBACE3B,KAAA,QACEiE,SAAS,CAAC,WAAW,CACrBC,KAAK,CAAE,CACLC,eAAe,QAAAC,MAAA,CAASxE,YAAY,KAAG,CACvCyE,cAAc,CAAE,OAAO,CACvBC,SAAS,CAAE,OAAO,CAClBC,OAAO,CAAE,MAAM,CACfC,KAAK,CAAE,MAAM,CACbC,UAAU,CAAE,cACd,CAAE,CAAAC,QAAA,eAEF5E,IAAA,OAAA4E,QAAA,CAAI,4BAA0B,CAAI,CAAC,cACnC5E,IAAA,QAAKmE,SAAS,CAAC,iBAAiB,CAAAS,QAAA,cACpC5E,IAAA,QACE6E,GAAG,CAAC,0DAA0D,CAC9DC,GAAG,CAAC,sBAAsB,CAC1BX,SAAS,CAAC,gBAAgB,CAC3B,CAAC,CACC,CAAC,cAIAjE,KAAA,QAAKiE,SAAS,CAAC,YAAY,CAAAS,QAAA,eACzB5E,IAAA,UAAA4E,QAAA,CAAO,kBAAgB,CAAO,CAAC,cAC/B1E,KAAA,WACEwC,KAAK,CAAEjB,gBAAiB,CACxBsD,QAAQ,CAAGC,CAAC,EAAKtD,mBAAmB,CAACsD,CAAC,CAACC,MAAM,CAACvC,KAAK,CAAE,CAAAkC,QAAA,eAErD5E,IAAA,WAAQ0C,KAAK,CAAC,EAAE,CAAAkC,QAAA,CAAC,yBAAuB,CAAQ,CAAC,CAChDvD,eAAe,CAAC4C,GAAG,CAAErB,GAAG,eACvB5C,IAAA,WAAuB0C,KAAK,CAAEE,GAAG,CAACtB,IAAK,CAAAsD,QAAA,CACpChC,GAAG,CAACtB,IAAI,EADEsB,GAAG,CAACtB,IAET,CACT,CAAC,EACI,CAAC,EACN,CAAC,CAEL,CAACG,gBAAgB,eAChBvB,KAAA,CAAAE,SAAA,EAAAwE,QAAA,eACE1E,KAAA,QAAKiE,SAAS,CAAC,YAAY,CAAAS,QAAA,eACzB5E,IAAA,UAAA4E,QAAA,CAAO,uBAAqB,CAAO,CAAC,cACpC5E,IAAA,UACEkF,IAAI,CAAC,QAAQ,CACbxC,KAAK,CAAEnC,QAAS,CAChBwE,QAAQ,CAAGC,CAAC,EAAKxE,WAAW,CAACwE,CAAC,CAACC,MAAM,CAACvC,KAAK,CAAE,CAC7CyC,WAAW,CAAC,gBAAgB,CAC7B,CAAC,EACC,CAAC,cAENjF,KAAA,QAAKiE,SAAS,CAAC,YAAY,CAAAS,QAAA,eACzB5E,IAAA,UAAA4E,QAAA,CAAO,0BAAwB,CAAO,CAAC,cACvC5E,IAAA,UACEkF,IAAI,CAAC,QAAQ,CACbxC,KAAK,CAAEjC,SAAU,CACjBsE,QAAQ,CAAGC,CAAC,EAAKtE,YAAY,CAACsE,CAAC,CAACC,MAAM,CAACvC,KAAK,CAAE,CAC9CyC,WAAW,CAAC,iBAAiB,CAC9B,CAAC,EACC,CAAC,EACN,CACH,cAEDnF,IAAA,WAAQoF,OAAO,CAAEzC,aAAc,CAAAiC,QAAA,CAAC,cAAY,CAAQ,CAAC,CAEpDjE,KAAK,eAAIX,IAAA,QAAKmE,SAAS,CAAC,OAAO,CAAAS,QAAA,CAAEjE,KAAK,CAAM,CAAC,CAE7CQ,aAAa,eACZjB,KAAA,QAAKiE,SAAS,CAAC,WAAW,CAAAS,QAAA,eAExB1E,KAAA,QAAKiE,SAAS,CAAC,aAAa,CAAAS,QAAA,eAC1B5E,IAAA,OAAA4E,QAAA,CAAI,0BAAwB,CAAI,CAAC,cACjC5E,IAAA,CAACP,mBAAmB,EAAC4F,KAAK,CAAC,MAAM,CAACC,MAAM,CAAE,GAAI,CAAAV,QAAA,cAC5C1E,KAAA,CAACR,QAAQ,EAAAkF,QAAA,eACP5E,IAAA,CAACL,GAAG,EACFkB,IAAI,CAAE4B,OAAO,CAAC,CAAE,CAChB8C,OAAO,CAAC,OAAO,CACfC,OAAO,CAAC,MAAM,CACdC,EAAE,CAAC,KAAK,CACRC,EAAE,CAAC,KAAK,CACRC,WAAW,CAAE,EAAG,CAChBC,KAAK,MAAAhB,QAAA,CAEJnC,OAAO,CAAC,CAAC,CAACwB,GAAG,CAAC,CAAC4B,KAAK,CAAEC,KAAK,gBAC1B9F,IAAA,CAACJ,IAAI,EAAuBmG,IAAI,CAAE1F,MAAM,CAACyF,KAAK,CAAGzF,MAAM,CAAC2F,MAAM,CAAE,UAAA1B,MAAA,CAA7CwB,KAAK,CAA0C,CACnE,CAAC,CACC,CAAC,cACN9F,IAAA,CAACR,OAAO,GAAE,CAAC,cACXQ,IAAA,CAACH,MAAM,EAACoG,aAAa,CAAC,QAAQ,CAACX,MAAM,CAAE,EAAG,CAAE,CAAC,EACrC,CAAC,CACQ,CAAC,cACtBtF,IAAA,QAAKmE,SAAS,CAAC,eAAe,CAAAS,QAAA,CAC3BsB,MAAM,CAACC,OAAO,CAACnE,gBAAgB,CAAC,CAAC,CAAC,CAACiC,GAAG,CAACmC,IAAA,MAAC,CAACvE,KAAK,CAAEwE,KAAK,CAAC,CAAAD,IAAA,oBACrDlG,KAAA,QAAiBiE,SAAS,gBAAAG,MAAA,CAAiB1C,aAAa,CAACC,KAAK,CAAC,CAAG,CAAA+C,QAAA,EAC/D/C,KAAK,CAAC,IAAE,CAACwE,KAAK,GADPxE,KAEL,CAAC,EACP,CAAC,CACC,CAAC,EACH,CAAC,cAGN3B,KAAA,QAAKiE,SAAS,CAAC,MAAM,CAAAS,QAAA,eACnB1E,KAAA,OAAA0E,QAAA,EAAKjD,UAAU,CAACZ,gBAAgB,CAACgD,KAAK,CAAG,CAAC,CAAC,CAAC,WAAS,EAAI,CAAC,cAC1D7D,KAAA,MAAA0E,QAAA,eACE5E,IAAA,WAAA4E,QAAA,CAAQ,oBAAkB,CAAQ,CAAC,CAAC,GAAG,cACvC5E,IAAA,SAAMmE,SAAS,CAAEvC,aAAa,CAACb,gBAAgB,CAACc,KAAK,CAAE,CAAA+C,QAAA,CACpD7D,gBAAgB,CAACc,KAAK,CACnB,CAAC,EACN,CAAC,cACJ3B,KAAA,MAAA0E,QAAA,eACE5E,IAAA,WAAA4E,QAAA,CAAQ,cAAY,CAAQ,CAAC,IAAC,CAAC,CAAC,EAAE,CAAG0B,IAAI,CAACC,MAAM,CAAC,CAAC,CAAG,CAAC,EAAEC,OAAO,CAAC,CAAC,CAAC,CAAC,QACrE,EAAG,CAAC,cACJtG,KAAA,MAAA0E,QAAA,eACE5E,IAAA,WAAA4E,QAAA,CAAQ,WAAS,CAAQ,CAAC,IAAC,CAAC,CAAC,EAAE,CAAG0B,IAAI,CAACC,MAAM,CAAC,CAAC,CAAG,EAAE,EAAEC,OAAO,CAAC,CAAC,CAAC,CAAC,IACnE,EAAG,CAAC,EACD,CAAC,cAGNtG,KAAA,QAAKiE,SAAS,CAAC,YAAY,CAAAS,QAAA,eACzB5E,IAAA,UAAA4E,QAAA,CAAO,wBAAsB,CAAO,CAAC,cACrC5E,IAAA,WACE0C,KAAK,CAAEzB,aAAc,CACrB8D,QAAQ,CAAGC,CAAC,EAAK9D,gBAAgB,CAACuF,QAAQ,CAACzB,CAAC,CAACC,MAAM,CAACvC,KAAK,CAAC,CAAE,CAAAkC,QAAA,CAE3D/D,IAAI,CAACoD,GAAG,CAAEC,IAAI,eACblE,IAAA,WAAyB0C,KAAK,CAAEwB,IAAI,CAACH,KAAM,CAAAa,QAAA,CACxCjD,UAAU,CAACuC,IAAI,CAACH,KAAK,CAAG,CAAC,CAAC,EADhBG,IAAI,CAACH,KAEV,CACT,CAAC,CACI,CAAC,EACN,CAAC,CAEL9C,aAAa,eACZf,KAAA,QAAKiE,SAAS,CAAC,MAAM,CAAAS,QAAA,eACnB5E,IAAA,OAAA4E,QAAA,CAAKjD,UAAU,CAACV,aAAa,CAAG,CAAC,CAAC,CAAK,CAAC,cACxCf,KAAA,MAAA0E,QAAA,eACE5E,IAAA,WAAA4E,QAAA,CAAQ,oBAAkB,CAAQ,CAAC,CAAC,GAAG,cACvC5E,IAAA,SACEmE,SAAS,CAAEvC,aAAa,CAACf,IAAI,CAACgC,IAAI,CAAEP,CAAC,EAAKA,CAAC,CAACyB,KAAK,GAAK9C,aAAa,CAAC,CAACY,KAAK,CAAE,CAAA+C,QAAA,CAE3E/D,IAAI,CAACgC,IAAI,CAAEP,CAAC,EAAKA,CAAC,CAACyB,KAAK,GAAK9C,aAAa,CAAC,CAACY,KAAK,CAC9C,CAAC,EACN,CAAC,EACD,CACN,cAGD7B,IAAA,OAAIoE,KAAK,CAAE,CAAEsC,SAAS,CAAE,MAAO,CAAE,CAAA9B,QAAA,CAAC,uBAAqB,CAAI,CAAC,cAC5D5E,IAAA,CAACP,mBAAmB,EAAC4F,KAAK,CAAC,MAAM,CAACC,MAAM,CAAE,GAAI,CAAAV,QAAA,cAC5C1E,KAAA,CAACf,SAAS,EACR0B,IAAI,CAAEmD,SAAU,CAChB2C,MAAM,CAAE,CAAEC,GAAG,CAAE,EAAE,CAAEC,KAAK,CAAE,EAAE,CAAEC,IAAI,CAAE,CAAC,CAAEC,MAAM,CAAE,CAAE,CAAE,CAAAnC,QAAA,eAEnD5E,IAAA,CAACT,aAAa,EAACyH,eAAe,CAAC,KAAK,CAAE,CAAC,cACvChH,IAAA,CAACX,KAAK,EAACkG,OAAO,CAAC,OAAO,CAAE,CAAC,cACzBvF,IAAA,CAACV,KAAK,EACI2H,KAAK,CAAE,CAAC,CAAC,CAAE,CAAC,CAAE,CAAC,CAAE,CACjBC,MAAM,CAAE,CAAC,CAAC,CAAE,CAAC,CAAE,CACfC,aAAa,CAAGC,GAAG,EAAK,CACtB,KAAM,CAAAC,QAAQ,CAAG,CACf,CAAC,CAAE,KAAK,CACR,CAAC,CAAE,UAAU,CACb,CAAC,CAAE,MACL,CAAC,CACD,MAAO,CAAAA,QAAQ,CAACD,GAAG,CAAC,EAAI,EAAE,CAC5B,CAAE,CACH,CAAC,cAEVpH,IAAA,CAACR,OAAO,EAAC8H,SAAS,CAAG5E,KAAK,EAAK,CACnB,KAAM,CAAA2E,QAAQ,CAAG,CACf,CAAC,CAAE,KAAK,CACR,CAAC,CAAE,UAAU,CACb,CAAC,CAAE,MACL,CAAC,CACD,MAAO,CAAAA,QAAQ,CAAC3E,KAAK,CAAC,EAAI,EAAE,CAC9B,CAAE,CAAE,CAAC,cAEf1C,IAAA,CAACZ,IAAI,EAAC8F,IAAI,CAAC,UAAU,CAACK,OAAO,CAAC,OAAO,CAACgC,MAAM,CAAC,SAAS,CAACC,WAAW,CAAE,CAAE,CAAE,CAAC,EAChE,CAAC,CACO,CAAC,EACnB,CACN,EACE,CAAC,CAEV,CAAC,CAED,cAAe,CAAAlH,oBAAoB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}